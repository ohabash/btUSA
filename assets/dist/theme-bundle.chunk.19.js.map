{"version":3,"sources":["webpack:///./assets/js/theme/account.js"],"names":["Account","$state","$","$body","loaded","next","$editAccountForm","classifyForm","$addressForm","$inboxForm","$accountReturnForm","$reorderForm","$invoiceButton","passwordRequirements","context","wishlist","Wishlist","length","registerEditAccountValidation","is","insertStateHiddenField","on","left","window","screen","availWidth","top","availHeight","url","data","open","initAddressFormValidation","registerInboxValidation","initAccountReturnFormValidation","initReorderForm","bindDeleteAddress","message","event","currentTarget","confirm","preventDefault","$productReorderCheckboxes","submitForm","find","remove","each","index","productCheckbox","productId","val","$input","type","name","value","append","swal","text","selectItem","validationModel","validation","stateSelector","$stateElement","addressValidator","nod","submit","add","$last","stateCountry","err","field","Error","$field","getStatus","Validators","setStateCountryValidation","cleanUpStateValidation","performCheck","areAll","errorMessage","formSubmit","i","ele","parseInt","formEditSelector","editValidator","emailSelector","$emailElement","passwordSelector","$passwordElement","password2Selector","$password2Element","currentPasswordSelector","$currentPassword","setEmailValidation","setPasswordValidation","selector","validate","cb","result","currentPassword","firstName","lastName","phoneNumber","inboxValidator","Number","enterOrderNum","enterSubject","enterMessage","PageManager"],"mappings":"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","file":"theme-bundle.chunk.19.js","sourcesContent":["import PageManager from './page-manager';\nimport $ from 'jquery';\nimport nod from './common/nod';\nimport Wishlist from './wishlist';\nimport validation from './common/form-validation';\nimport stateCountry from './common/state-country';\nimport { classifyForm, Validators, insertStateHiddenField } from './common/form-utils';\nimport swal from 'sweetalert2';\n\nexport default class Account extends PageManager {\n    constructor() {\n        super();\n\n        this.$state = $('[data-field-type=\"State\"]');\n        this.$body = $('body');\n    }\n\n    loaded(next) {\n        const $editAccountForm = classifyForm('form[data-edit-account-form]');\n        const $addressForm = classifyForm('form[data-address-form]');\n        const $inboxForm = classifyForm('form[data-inbox-form]');\n        const $accountReturnForm = classifyForm('[data-account-return-form]');\n        const $reorderForm = classifyForm('[data-account-reorder-form]');\n        const $invoiceButton = $('[data-print-invoice]');\n\n        // Injected via template\n        this.passwordRequirements = this.context.passwordRequirements;\n\n        // Instantiates wish list JS\n        this.wishlist = new Wishlist();\n\n        if ($editAccountForm.length) {\n            this.registerEditAccountValidation($editAccountForm);\n            if (this.$state.is('input')) {\n                insertStateHiddenField(this.$state);\n            }\n        }\n\n        if ($invoiceButton.length) {\n            $invoiceButton.on('click', () => {\n                const left = window.screen.availWidth / 2 - 450;\n                const top = window.screen.availHeight / 2 - 320;\n                const url = $invoiceButton.data('printInvoice');\n\n                window.open(url, 'orderInvoice', `width=900,height=650,left=${left},top=${top},scrollbars=1`);\n            });\n        }\n\n        if ($addressForm.length) {\n            this.initAddressFormValidation($addressForm);\n\n            if (this.$state.is('input')) {\n                insertStateHiddenField(this.$state);\n            }\n        }\n\n        if ($inboxForm.length) {\n            this.registerInboxValidation($inboxForm);\n        }\n\n        if ($accountReturnForm.length) {\n            this.initAccountReturnFormValidation($accountReturnForm);\n        }\n\n        if ($reorderForm.length) {\n            this.initReorderForm($reorderForm);\n        }\n\n        this.bindDeleteAddress();\n\n        next();\n    }\n\n    /**\n     * Binds a submit hook to ensure the customer receives a confirmation dialog before deleting an address\n     */\n    bindDeleteAddress() {\n        $('[data-delete-address]').on('submit', event => {\n            const message = $(event.currentTarget).data('deleteAddress');\n\n            if (!window.confirm(message)) {\n                event.preventDefault();\n            }\n        });\n    }\n\n    initReorderForm($reorderForm) {\n        $reorderForm.on('submit', event => {\n            const $productReorderCheckboxes = $('.account-listItem .form-checkbox:checked');\n            let submitForm = false;\n\n            $reorderForm.find('[name^=\"reorderitem\"]').remove();\n\n            $productReorderCheckboxes.each((index, productCheckbox) => {\n                const productId = $(productCheckbox).val();\n                const $input = $('<input>', {\n                    type: 'hidden',\n                    name: `reorderitem[${productId}]`,\n                    value: '1',\n                });\n\n                submitForm = true;\n\n                $reorderForm.append($input);\n            });\n\n            if (!submitForm) {\n                event.preventDefault();\n                swal({\n                    text: this.context.selectItem,\n                    type: 'error',\n                });\n            }\n        });\n    }\n\n    initAddressFormValidation($addressForm) {\n        const validationModel = validation($addressForm);\n        const stateSelector = 'form[data-address-form] [data-field-type=\"State\"]';\n        const $stateElement = $(stateSelector);\n        const addressValidator = nod({\n            submit: 'form[data-address-form] input[type=\"submit\"]',\n        });\n\n        addressValidator.add(validationModel);\n\n        if ($stateElement) {\n            let $last;\n\n            // Requests the states for a country with AJAX\n            stateCountry($stateElement, this.context, (err, field) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                const $field = $(field);\n\n                if (addressValidator.getStatus($stateElement) !== 'undefined') {\n                    addressValidator.remove($stateElement);\n                }\n\n                if ($last) {\n                    addressValidator.remove($last);\n                }\n\n                if ($field.is('select')) {\n                    $last = field;\n                    Validators.setStateCountryValidation(addressValidator, field);\n                } else {\n                    Validators.cleanUpStateValidation(field);\n                }\n            });\n        }\n\n        $addressForm.on('submit', event => {\n            addressValidator.performCheck();\n\n            if (addressValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    initAccountReturnFormValidation($accountReturnForm) {\n        const errorMessage = $accountReturnForm.data('accountReturnFormError');\n\n        $accountReturnForm.on('submit', event => {\n            let formSubmit = false;\n\n            // Iterate until we find a non-zero value in the dropdown for quantity\n            $('[name^=\"return_qty\"]', $accountReturnForm).each((i, ele) => {\n                if (parseInt($(ele).val(), 10) !== 0) {\n                    formSubmit = true;\n\n                    // Exit out of loop if we found at least one return\n                    return true;\n                }\n            });\n\n            if (formSubmit) {\n                return true;\n            }\n\n            swal({\n                text: errorMessage,\n                type: 'error',\n            });\n\n            return event.preventDefault();\n        });\n    }\n\n    registerEditAccountValidation($editAccountForm) {\n        const validationModel = validation($editAccountForm);\n        const formEditSelector = 'form[data-edit-account-form]';\n        const editValidator = nod({\n            submit: '${formEditSelector} input[type=\"submit\"]',\n        });\n        const emailSelector = `${formEditSelector} [data-field-type=\"EmailAddress\"]`;\n        const $emailElement = $(emailSelector);\n        const passwordSelector = `${formEditSelector} [data-field-type=\"Password\"]`;\n        const $passwordElement = $(passwordSelector);\n        const password2Selector = `${formEditSelector} [data-field-type=\"ConfirmPassword\"]`;\n        const $password2Element = $(password2Selector);\n        const currentPasswordSelector = `${formEditSelector} [data-field-type=\"CurrentPassword\"]`;\n        const $currentPassword = $(currentPasswordSelector);\n\n        // This only handles the custom fields, standard fields are added below\n        editValidator.add(validationModel);\n\n        if ($emailElement) {\n            editValidator.remove(emailSelector);\n            Validators.setEmailValidation(editValidator, emailSelector);\n        }\n\n        if ($passwordElement && $password2Element) {\n            editValidator.remove(passwordSelector);\n            editValidator.remove(password2Selector);\n            Validators.setPasswordValidation(\n                editValidator,\n                passwordSelector,\n                password2Selector,\n                this.passwordRequirements,\n                true,\n            );\n        }\n\n        if ($currentPassword) {\n            editValidator.add({\n                selector: currentPasswordSelector,\n                validate: (cb, val) => {\n                    let result = true;\n\n                    if (val === '' && $passwordElement.val() !== '') {\n                        result = false;\n                    }\n\n                    cb(result);\n                },\n                errorMessage: this.context.currentPassword,\n            });\n        }\n\n        editValidator.add([\n            {\n                selector: `${formEditSelector} input[name='account_firstname']`,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    cb(result);\n                },\n                errorMessage: this.context.firstName,\n            },\n            {\n                selector: `${formEditSelector} input[name='account_lastname']`,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    cb(result);\n                },\n                errorMessage: this.context.lastName,\n            },\n            {\n                selector: `${formEditSelector} input[name='account_phone']`,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    cb(result);\n                },\n                errorMessage: this.context.phoneNumber,\n            },\n        ]);\n\n        $editAccountForm.on('submit', event => {\n            editValidator.performCheck();\n\n            if (editValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerInboxValidation($inboxForm) {\n        const inboxValidator = nod({\n            submit: 'form[data-inbox-form] input[type=\"submit\"]',\n        });\n\n        inboxValidator.add([\n            {\n                selector: 'form[data-inbox-form] select[name=\"message_order_id\"]',\n                validate: (cb, val) => {\n                    const result = Number(val) !== 0;\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterOrderNum,\n            },\n            {\n                selector: 'form[data-inbox-form] input[name=\"message_subject\"]',\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterSubject,\n            },\n            {\n                selector: 'form[data-inbox-form] textarea[name=\"message_content\"]',\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterMessage,\n            },\n        ]);\n\n        $inboxForm.on('submit', event => {\n            inboxValidator.performCheck();\n\n            if (inboxValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./assets/js/theme/account.js"],"sourceRoot":""}